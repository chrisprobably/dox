#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('commander')
  , util = require('util')
  , dox = require('../')
  , fs = require('fs')  
  , glob = require('glob');

// options

program
  .version(dox.version)
  .option('-i, --input <inputglob>', 'input files glob e.g. lib/*.js')
  .option('-o, --output <outputfile>', 'the output file name, this will read input from the command-line rather than stdio')
  .option('-r, --raw', 'output "raw" comments, leaving the markdown intact')
  .option('-d, --debug', 'output parsed comments for debugging');

// examples

program.on('--help', function(){
  console.log('  Examples:');
  console.log('');
  console.log('    # stdin');
  console.log('    $ dox > myfile.json');
  console.log('');
  console.log('    # operates over stdio');
  console.log('    $ dox < myfile.js > myfile.json');
  console.log('');
  console.log('    # list of input files');
  console.log('    $ dox -i *.js -o myfile.json');  
  console.log('');
});

// parse argv
program.parse(process.argv);

var buf = '';

if (program.output && program.input) {
	glob(program.input, function (er, files) {
		if (program.debug) {
			console.log('Reading input files %j', files);
		}
		files.forEach(function(inputFile) {
			buf += fs.readFileSync(inputFile, 'utf8');	
		});
		var obj = dox.parseComments(buf, { raw: program.raw });
		fs.writeFileSync(program.output, JSON.stringify(obj, null, 2), 'utf8');
	});
} else {
	// process stdin
	process.stdin.setEncoding('utf8');
	process.stdin.on('data', function(chunk){ buf += chunk; });
	process.stdin.on('end', function(){
	  var obj = dox.parseComments(buf, { raw: program.raw });
	  if (program.debug) {
		process.stdout.write(util.inspect(obj, false, Infinity, true) + '\n');
	  } else {
		process.stdout.write(JSON.stringify(obj, null, 2));
	  }
	}).resume();
}